diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/compile4/events.cpp touchmegames-0.2.5-ok/src/compile4/events.cpp
--- touchmegames-0.2.5/src/compile4/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/compile4/events.cpp	2009-04-14 12:42:29.046564168 -0400
@@ -65,7 +65,7 @@
         
         
         if (compile->circy > compile->circendy) {
-            int cmove;
+            long cmove;
             compile->winner = compile->roundOver();
             
             if (compile->winner) {
@@ -84,12 +84,12 @@
             compile->gameState = DROPPING_CPU;
             ++compile->move;
             cmove = compile->think(false);
-            for (int y = 5; y >= 0; --y) {
+            for (long y = 5; y >= 0; --y) {
                 if (compile->grid[cmove][y] == 0) {
                     compile->grid[cmove][y] = 2;
                     compile->widgetGrid[cmove][y] = compile->p2Circs[compile->move / 2];
                     
-                    compile->circx = (int)cmove * 80;
+                    compile->circx = (long)cmove * 80;
                     compile->circy = -80;
                     compile->circendy = 80 * (y);
     
@@ -133,7 +133,7 @@
     else if (compile->gameState == BETWEEN_ROUNDS) {
             
         if ((--compile->betweenRoundCounter % 8) == 0) {
-            for (int i = 0; i < 4; ++i) {
+            for (long i = 0; i < 4; ++i) {
                 if (compile->showBlink) {
                     gtk_widget_show(compile->widgetGrid[compile->blinky[i][0]][compile->blinky[i][1]]);
                 }
@@ -194,7 +194,7 @@
                 compile->gameState = PLAYER_TURN;
             }
             else {
-                int cmove;
+                long cmove;
                 compile->winner = compile->roundOver();
                 if (compile->winner) {
                     if (compile->winner > 0) {
@@ -212,12 +212,12 @@
                 compile->gameState = DROPPING_CPU;
                 ++compile->move;
                 cmove = compile->think(false);
-                for (int y = 5; y >= 0; --y) {
+                for (long y = 5; y >= 0; --y) {
                     if (compile->grid[cmove][y] == 0) {
                         compile->grid[cmove][y] = 2;
                         compile->widgetGrid[cmove][y] = compile->p2Circs[compile->move / 2];
                         
-                        compile->circx = (int)cmove * 80;
+                        compile->circx = (long)cmove * 80;
                         compile->circy = -80;
                         compile->circendy = 80 * (y);
         
@@ -247,12 +247,12 @@
 void Compile4::colPressed(GtkWidget *widget, GdkEventKey *event, gpointer ptr) {
     Compile4 *compile(reinterpret_cast<Compile4 *>(ptr));
     if (compile->gameState == PLAYER_TURN) {
-        int col((int)g_object_get_data((GObject *)widget, KEY_STR));
-        for (int y = 5; y >= 0; --y) {
+        long col((long)g_object_get_data((GObject *)widget, KEY_STR));
+        for (long y = 5; y >= 0; --y) {
             if (compile->grid[col][y] == 0) {
                 compile->grid[col][y] = 1;
                 compile->widgetGrid[col][y] = compile->p1Circs[compile->move / 2];
-                compile->circx = (int)g_object_get_data((GObject *)widget, KEY_STR) * 80;
+                compile->circx = (long)g_object_get_data((GObject *)widget, KEY_STR) * 80;
                 compile->circy = -80;
                 compile->circendy = 80 * (y);
 
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/consume21/events.cpp touchmegames-0.2.5-ok/src/consume21/events.cpp
--- touchmegames-0.2.5/src/consume21/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/consume21/events.cpp	2009-04-14 12:43:01.190071324 -0400
@@ -63,7 +63,7 @@
             if (consume->timeLeft == 0) {
                 consume->gameState = OUT_OF_TIME;
             }
-            consume->progress.percent((int)consume->timeLeft / 3);
+            consume->progress.percent((long)consume->timeLeft / 3);
             
             break;
         case TAKE_SCORE: {
@@ -71,7 +71,7 @@
             std::string str;
             // taking score
             if (consume->timeLeft) {
-                int total;
+                long total;
                 consume->getMultiplier();
                 if (consume->multiplier != -1) {
                     consume->roundScore += consume->multiplier;
@@ -80,7 +80,7 @@
                     consume->addCommas(str);
                     gtk_label_set_text((GtkLabel *)consume->columnsTotal, str.c_str());
                     --consume->timeLeft;
-                    consume->progress.percent((int)consume->timeLeft / 3);
+                    consume->progress.percent((long)consume->timeLeft / 3);
                 }
                 else {
                     consume->timeLeft = 0;
@@ -122,9 +122,9 @@
 
 void Consume21::colPressed(GtkWidget *widget, GdkEventKey *event, gpointer ptr) {
     Consume21 *consume(reinterpret_cast<Consume21 *>(ptr));
-    int column(((int)g_object_get_data((GObject *)widget, KEY_STR) & 0xF) - 1);
-    int cardNum((((int)g_object_get_data((GObject *)consume->mugImages[consume->totalMugImages - 1], KEY_STR) >> 4) & 0xF));
-    int soft(0);
+    long column(((long)g_object_get_data((GObject *)widget, KEY_STR) & 0xF) - 1);
+    long cardNum((((long)g_object_get_data((GObject *)consume->mugImages[consume->totalMugImages - 1], KEY_STR) >> 4) & 0xF));
+    long soft(0);
     std::string str;
     if (consume->gameState == WAITING) {
         consume->gameState = RUNNING;
@@ -135,7 +135,7 @@
         
     if (column != -1) {
         std::stringstream sstr;
-        int total(0);
+        long total(0);
         
         // make sure it can fit into the column
         if (consume->columnTotal[column] + cardNum > 21) {
@@ -147,9 +147,9 @@
                 
             }
             else { // now check to see if there's at least one 11 in the pile
-                int card = consume->columnMugs[column];
-                int whichCard = -1;
-                for (int i = 0; i < card; ++i) {
+                long card = consume->columnMugs[column];
+                long whichCard = -1;
+                for (long i = 0; i < card; ++i) {
                     if (consume->columnMugValues[column][i] == 11) {
                         // we can use this and subtract 10 from it to include
                         // the new card
@@ -192,7 +192,7 @@
         
         sstr << consume->columnTotal[column];
         // check for 11s
-        for (int i = 0; i < consume->columnMugs[column]; ++i) {
+        for (long i = 0; i < consume->columnMugs[column]; ++i) {
             if (consume->columnMugValues[column][i] == 11) {
                 sstr << " - S";
             }
@@ -210,7 +210,7 @@
         consume->createMug();
         
         
-        for (int i = 0; i < 5; ++i) {
+        for (long i = 0; i < 5; ++i) {
             total += consume->columnTotal[i];
         }
         sstr.str("");
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/dropzone/events.cpp touchmegames-0.2.5-ok/src/dropzone/events.cpp
--- touchmegames-0.2.5/src/dropzone/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/dropzone/events.cpp	2009-04-14 13:12:20.000000000 -0400
@@ -84,10 +84,10 @@
             break;
         case BLINKING:
             if (--t->blinkCntr == 0) {
-                int i;
+                long i;
                 t->gameState = RUNNING;
                 for (i = 0; i < 100 && t->d[i].x != -1; ++i) {
-                    int x(t->d[i].x), y(t->d[i].y);
+                    long x(t->d[i].x), y(t->d[i].y);
                     gtk_widget_show(t->discs[x][y]);
                     g_object_set_data((GObject *)t->discs[x][y], KEY_STR, (gpointer)0);
                     t->reloadImage(t->discs[x][y], "discb.png");
@@ -110,12 +110,12 @@
             }
             else {
                 if ((t->blinkCntr % 2) == 0) {
-                    for (int i = 0; i < 100 && t->d[i].x != -1; ++i) {
+                    for (long i = 0; i < 100 && t->d[i].x != -1; ++i) {
                         gtk_widget_hide(t->discs[t->d[i].x][t->d[i].y]);
                     }
                 }
                 else { //if ((t->blinkCntr % 2) == 0) {
-                    for (int i = 0; i < 100 && t->d[i].x != -1; ++i) {
+                    for (long i = 0; i < 100 && t->d[i].x != -1; ++i) {
 
                         gtk_widget_show(t->discs[t->d[i].x][t->d[i].y]);
                     }
@@ -165,8 +165,8 @@
         dz->gameState = PAUSED;
         dz->reloadMainImage(dz->pauseButton, "buttons/button_play.png");
         
-        for (int y = 0; y < dz->numRows; ++y) {
-            for (int x = 0; x < dz->numColumns; ++x) {
+        for (long y = 0; y < dz->numRows; ++y) {
+            for (long x = 0; x < dz->numColumns; ++x) {
                 gtk_widget_hide(dz->discs[x][y]);
             }
         }
@@ -177,8 +177,8 @@
     else if (dz->gameState == PAUSED) {
         dz->gameState = RUNNING;
         dz->reloadMainImage(dz->pauseButton, "buttons/button_pause.png");
-        for (int y = 0; y < dz->numRows; ++y) {
-            for (int x = 0; x < dz->numColumns; ++x) {
+        for (long y = 0; y < dz->numRows; ++y) {
+            for (long x = 0; x < dz->numColumns; ++x) {
                 gtk_widget_show(dz->discs[x][y]);
             }
         }
@@ -192,10 +192,10 @@
     DropZone *u(reinterpret_cast<DropZone *>(ptr));
     
     if (u->gameState == BLINKING) {
-        int i;
+        long i;
         u->gameState = RUNNING;
         for (i = 0; i < 100 && u->d[i].x != -1; ++i) {
-            int x(u->d[i].x), y(u->d[i].y);
+            long x(u->d[i].x), y(u->d[i].y);
             gtk_widget_show(u->discs[x][y]);
             g_object_set_data((GObject *)u->discs[x][y], KEY_STR, (gpointer)0);
             u->reloadImage(u->discs[x][y], "discb.png");
@@ -235,7 +235,7 @@
         gdouble n((event->x / (gdouble)u->discRadius) - 0.5);
         
 //         std::cout << "N " << n << std::endl;
-//         std::cout << "Offset " << (int)((event->x / u->discRadius)) - n << std::endl;
+//         std::cout << "Offset " << (long)((event->x / u->discRadius)) - n << std::endl;
         x = (int)n;
         y = 0;
         u->dropDisc(x, (int)((event->x / u->discRadius)) - n, y, 0);
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/dropzone/interface.cpp touchmegames-0.2.5-ok/src/dropzone/interface.cpp
--- touchmegames-0.2.5/src/dropzone/interface.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/dropzone/interface.cpp	2009-04-14 13:13:27.000000000 -0400
@@ -234,14 +234,14 @@
     
     
     if (g_object_get_data((GObject *)nextDisc, KEY_STR) != 0) {
-        reloadImage(nextDisc, imageStrs[(int)g_object_get_data((GObject *)nextDisc, KEY_STR)]);
+        reloadImage(nextDisc, imageStrs[(long)g_object_get_data((GObject *)nextDisc, KEY_STR)]);
     }
     if (g_object_get_data((GObject *)onDeck, KEY_STR) != 0) {
-        reloadImage(onDeck, imageStrs[(int)g_object_get_data((GObject *)onDeck, KEY_STR)]);
+        reloadImage(onDeck, imageStrs[(long)g_object_get_data((GObject *)onDeck, KEY_STR)]);
     }
     if (valid && g_object_get_data((GObject *)discs[x][y], KEY_STR) != 0) {
         moveDropper(x, y);
-        reloadImage(discs[x][y], imageStrs[(int)g_object_get_data((GObject *)discs[x][y], KEY_STR)]);
+        reloadImage(discs[x][y], imageStrs[(long)g_object_get_data((GObject *)discs[x][y], KEY_STR)]);
     }
 }
 
@@ -267,7 +267,7 @@
                 int c = getData(x, 0);
                 if (c > 0) {
                     std::string str("disc");
-                    str += (char)((int)g_object_get_data((GObject *)discs[x][0], KEY_STR) + '0');
+                    str += (char)((long)g_object_get_data((GObject *)discs[x][0], KEY_STR) + '0');
                     str += "b.png";
                     reloadImage(discs[x][0], str);
                 }
@@ -316,7 +316,7 @@
     if (GTK_IS_OBJECT((GtkObject *)discs[x][y]) == FALSE) {
         return -1;
     }
-    return (int)g_object_get_data((GObject *)discs[x][y], KEY_STR);
+    return (long)g_object_get_data((GObject *)discs[x][y], KEY_STR);
 }
 
 void DropZone::updateScore(int addition) {
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/dropzone/support.cpp touchmegames-0.2.5-ok/src/dropzone/support.cpp
--- touchmegames-0.2.5/src/dropzone/support.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/dropzone/support.cpp	2009-04-14 13:13:52.000000000 -0400
@@ -587,7 +587,7 @@
 //                     }
                     else {
                         int tmpx(x), tmpy(y);
-                        int color((int)g_object_get_data((GObject *)discs[x][y], KEY_STR));
+                        long color((long)g_object_get_data((GObject *)discs[x][y], KEY_STR));
 //                         std::cout << "Time To drop" << std::endl;
                         outputGame();
 //                         std::cout << "Drop this guy: " << tmpx << ' ' << tmpy << std::endl;
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/events.cpp touchmegames-0.2.5-ok/src/events.cpp
--- touchmegames-0.2.5/src/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/events.cpp	2009-04-14 12:51:54.000000000 -0400
@@ -27,14 +27,14 @@
     GtkWidget *w;
     GdkColor *color;
     GtkStyle *style;
-    int game;
+    long game;
     
     if (sg->lastGameSelected) {
             gtk_event_box_set_visible_window((GtkEventBox *)sg->lastGameSelected, FALSE);
             gtk_widget_destroy(sg->previewTable);
     }
     
-    game = (int)g_object_get_data((GObject *)widget, KEY_STR);
+    game = (long)g_object_get_data((GObject *)widget, KEY_STR);
 
     gtk_fixed_move((GtkFixed *)sg->gameSelectFixed, sg->gameBg, (game & 1 ? 160: 10), ((game / 2) * 140) + 60);
     gtk_widget_show(sg->gameBg);
@@ -106,7 +106,7 @@
 
 void TOUCHME_GAMES::showSubMenu(GtkWidget *widget, GdkEvent *event, gpointer ptr) {
     TOUCHME_GAMES *sg(reinterpret_cast<TOUCHME_GAMES *>(ptr));
-    int gameType((int)g_object_get_data((GObject *)widget, KEY_STR));
+    long gameType((long)g_object_get_data((GObject *)widget, KEY_STR));
     
     if (sg->lastGameSelected) {
         sg->lastGameSelected = false;
@@ -146,7 +146,7 @@
 void TOUCHME_GAMES::showAbout(GtkWidget *widget, GdkEvent *event, gpointer ptr) {
     TOUCHME_GAMES *sg(reinterpret_cast<TOUCHME_GAMES *>(ptr));
     
-    for (int i = 0; i < 5; ++i) {
+    for (long i = 0; i < 5; ++i) {
         gtk_widget_hide(sg->menuWidgets[i]);
         gtk_widget_hide(sg->menuCaptions[i]);
     }
@@ -161,7 +161,7 @@
     TOUCHME_GAMES *tg(reinterpret_cast<TOUCHME_GAMES *>(ptr));
     unsigned long val;
     
-    val = (int)g_object_get_data((GObject *)widget, KEY_STR);
+    val = (long)g_object_get_data((GObject *)widget, KEY_STR);
     
     if (tg->lastGameSelected) {
         tg->lastGameSelected = false;
@@ -184,7 +184,7 @@
     TOUCHME_GAMES *tg(reinterpret_cast<TOUCHME_GAMES *>(ptr));
     unsigned long val;
     
-    val = (int)g_object_get_data((GObject *)widget, KEY_STR);
+    val = (long)g_object_get_data((GObject *)widget, KEY_STR);
     
     if (tg->lastGameSelected) {
         tg->lastGameSelected = false;
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/flogthedolphin/events.cpp touchmegames-0.2.5-ok/src/flogthedolphin/events.cpp
--- touchmegames-0.2.5/src/flogthedolphin/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/flogthedolphin/events.cpp	2009-04-14 12:58:58.000000000 -0400
@@ -206,7 +206,7 @@
                     gtk_widget_show(ftd->dolphinImage);
                     ftd->dolphinTilt = ftd->dolphinTiltReload;
             }
-            gtk_fixed_move((GtkFixed *)ftd->fixed, ftd->dolphinImage, 90, (int)dolphiny);
+            gtk_fixed_move((GtkFixed *)ftd->fixed, ftd->dolphinImage, 90, (long)dolphiny);
             return TRUE;
     }
     
@@ -242,7 +242,7 @@
             gtk_widget_show(ftd->dolphinImage);
             ftd->dolphinTilt = ftd->dolphinTiltReload;
     }
-    gtk_fixed_move((GtkFixed *)ftd->fixed, ftd->dolphinImage, 300, (int)dolphiny);
+    gtk_fixed_move((GtkFixed *)ftd->fixed, ftd->dolphinImage, 300, (long)dolphiny);
     ftd->radians += .1;
     if (ftd->t <= 0.06) {
             float totalTime((((ftd->hvelocity * ftd->hvelocity * 
@@ -263,7 +263,7 @@
             if (ftd->hvelocity < 5) {
                     ftd->hvelocity = 50;
             }
-            gtk_fixed_move((GtkFixed *)ftd->fixed, ftd->dolphinImage, 300, (int)dolphiny);
+            gtk_fixed_move((GtkFixed *)ftd->fixed, ftd->dolphinImage, 300, (long)dolphiny);
     }
     if (dolphiny + 200 >= 550) {
             
@@ -380,7 +380,7 @@
 void FLOG_THE_DOLPHIN::setLength() {
     std::stringstream sstr;
     length += rate / 30.0;
-    sstr << (int)length;
+    sstr << (long)length;
     gtk_label_set_text((GtkLabel *)currentLabel, sstr.str().c_str());
 }
 
@@ -388,24 +388,24 @@
     float dolphinNosey(90 * sin(currentDolphin * 5 + 40) + dolphiny + 100), 
             dolphinNosex(90 * cos(currentDolphin * 5 + 40) + 400);
     
-    int buoyy(buoyx + (int)((-112.0 / 32.0) * dolphinNosex) + 132 + 600);
+    long buoyy(buoyx + (long)((-112.0 / 32.0) * dolphinNosex) + 132 + 600);
     if (dolphinNosey > 480 && buoyy > 0) {
         
         if (dolphinNosey > buoyy && buoyx >= 368 && buoyx <= 500) {
             std::stringstream sstr;
             
             // Calculate the score
-            for (int i = 0; i < 8; ++i) {
-                if ((int)length > top8[i]) {
-                    for (int j = 7; j >= i + 1; --j) {
+            for (long i = 0; i < 8; ++i) {
+                if ((long)length > top8[i]) {
+                    for (long j = 7; j >= i + 1; --j) {
                         top8[j] = top8[j - 1];
                     }
-                    top8[i] = (int)length;
+                    top8[i] = (long)length;
                     i = 9;
                 }
             }
             totalLength = 0;
-            for (int i = 0; i < 8; ++i) {
+            for (long i = 0; i < 8; ++i) {
                 totalLength += top8[i];
             }
             sstr << totalLength;
@@ -444,7 +444,7 @@
     if (tmpRate < 0.33) {
         tmpRate = 0.33;
     }
-    ftd->rate = (int)(tmpRate * 30.0);
+    ftd->rate = (long)(tmpRate * 30.0);
     ftd->initialy = dolphiny;
     rad = ftd->radians;
     if (rad > 1.57) {
@@ -452,7 +452,7 @@
     }
     //rad -= 0.7535;
     //rad *= 10;
-    ftd->angle = 45 + (int)rad;
+    ftd->angle = 45 + (long)rad;
     
     ftd->gameState = FLOG_THE_DOLPHIN::middleOfRound;
     ftd->t = 0.0;
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/fortresscrackers/events.cpp touchmegames-0.2.5-ok/src/fortresscrackers/events.cpp
--- touchmegames-0.2.5/src/fortresscrackers/events.cpp	2009-03-14 01:09:19.000000000 -0400
+++ touchmegames-0.2.5-ok/src/fortresscrackers/events.cpp	2009-04-14 12:44:26.967808398 -0400
@@ -57,7 +57,7 @@
 
 gboolean FortressCrackers::timeout(gpointer ptr) {
     FortressCrackers *f(reinterpret_cast<FortressCrackers *>(ptr));
-    int second, minute;
+    long second, minute;
     std::stringstream sstr;
 
     switch (f->gameState) {
@@ -75,12 +75,12 @@
                 f->stageCountDown = 20;
                 f->playWave("buzzer.wav");
             }
-            f->progress.percent((int)f->timeLeft / 6);
+            f->progress.percent((long)f->timeLeft / 6);
             
-            second = ((int)(f->timeLeft / 5)) % 60;
-            minute = (int)(f->timeLeft / 5) / 60;
+            second = ((long)(f->timeLeft / 5)) % 60;
+            minute = (long)(f->timeLeft / 5) / 60;
             
-            sstr << (int)minute << ':' << std::setw(2) << std::setfill('0') << (int)second;
+            sstr << (long)minute << ':' << std::setw(2) << std::setfill('0') << (long)second;
             
             f->progress.text(sstr.str().c_str());
             break;
@@ -128,12 +128,12 @@
                 f->timeBonus += 50;
                 gtk_label_set_text((GtkLabel *)f->timeScoreLabel, f->addCommas(f->timeBonus).c_str());
                 
-                f->progress.percent((int)f->timeLeft / 6);
+                f->progress.percent((long)f->timeLeft / 6);
             
-                second = ((int)(f->timeLeft / 5)) % 60;
-                minute = (int)(f->timeLeft / 5) / 60;
+                second = ((long)(f->timeLeft / 5)) % 60;
+                minute = (long)(f->timeLeft / 5) / 60;
             
-                sstr << (int)minute << ':' << std::setw(2) << std::setfill('0') << (int)second;
+                sstr << (long)minute << ':' << std::setw(2) << std::setfill('0') << (long)second;
             
                 f->progress.text(sstr.str().c_str());
             }
@@ -238,7 +238,7 @@
 
 void FortressCrackers::takeScore(GtkWidget *widget, GdkEventButton *event, gpointer ptr) {
     FortressCrackers *f(reinterpret_cast<FortressCrackers *>(ptr));
-    int x, y;
+    long x, y;
     if (f->gameState > RUNNING) {
         return;
     }
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/fotoseek/events.cpp touchmegames-0.2.5-ok/src/fotoseek/events.cpp
--- touchmegames-0.2.5/src/fotoseek/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/fotoseek/events.cpp	2009-04-14 12:44:52.375207219 -0400
@@ -150,9 +150,9 @@
 void FotoSeek::playAreaClicked(GtkWidget *widget, GdkEventButton *event, gpointer *ptr) {
     FotoSeek *fs(reinterpret_cast<FotoSeek *>(ptr));
     if (fs->gameState == RUNNING) {
-        fs->checkCircle((int)event->x, (int)event->y);
+        fs->checkCircle((long)event->x, (long)event->y);
         // check for round over
-        for (int i = 0; i < 5; ++i) {
+        for (long i = 0; i < 5; ++i) {
             if (fs->diffCoords[i].found == false) {
                 return;
             }
@@ -169,7 +169,7 @@
     if (fs->gameState == RUNNING) {
 //         std::cout << "Hint Clicked" << std::endl;
         if (fs->currentHint < 3) {
-            for (int i = 0; i < 5; ++i) {
+            for (long i = 0; i < 5; ++i) {
                 if (fs->diffCoords[i].found == false) {
                     fs->paintCircle(&fs->diffCoords[i], true);
                     fs->diffCoords[i].found = true;
@@ -177,7 +177,7 @@
                     g_object_set_data((GObject *)fs->hintImages[fs->currentHint], KEY_STR, (void *)1);
                     ++fs->currentHint;
                     // check for round over
-                    for (int i = 0; i < 5; ++i) {
+                    for (long i = 0; i < 5; ++i) {
                         if (fs->diffCoords[i].found == false) {
                             return;
                         }
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/foxyboxy/events.cpp touchmegames-0.2.5-ok/src/foxyboxy/events.cpp
--- touchmegames-0.2.5/src/foxyboxy/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/foxyboxy/events.cpp	2009-04-14 12:45:15.838172145 -0400
@@ -112,13 +112,13 @@
     FoxyBoxy *fb(reinterpret_cast<FoxyBoxy *>(ptr));
     
     if (fb->gameState == RUNNING) {
-        for (int i = 0; i < 10; ++i) {
-            for (int j = 0; j < 22; ++j) {
+        for (long i = 0; i < 10; ++i) {
+            for (long j = 0; j < 22; ++j) {
                 gtk_widget_hide(fb->blocks[i][j]);
             }
         }
-        for (int i = 0; i < 5; ++i) {
-            for (int j = 0; j < 6; ++j) {
+        for (long i = 0; i < 5; ++i) {
+            for (long j = 0; j < 6; ++j) {
                 gtk_widget_hide(fb->nextBlocks[i][j]);
             }
         }
@@ -127,13 +127,13 @@
         fb->reloadMainImage(fb->pauseButton, "buttons/button_play.png");
     }
     else if (fb->gameState == PAUSED) {
-        for (int i = 0; i < 10; ++i) {
-            for (int j = 0; j < 22; ++j) {
+        for (long i = 0; i < 10; ++i) {
+            for (long j = 0; j < 22; ++j) {
                 gtk_widget_show(fb->blocks[i][j]);
             }
         }
-        for (int i = 0; i < 5; ++i) {
-            for (int j = 0; j < 6; ++j) {
+        for (long i = 0; i < 5; ++i) {
+            for (long j = 0; j < 6; ++j) {
                 gtk_widget_show(fb->nextBlocks[i][j]);
             }
         }
@@ -155,7 +155,7 @@
 
     if (event->type == GDK_BUTTON_PRESS && !fb->alreadyPressed) {
         fb->alreadyPressed = true;
-        fb->doAction((int)event->x, (int)event->y);
+        fb->doAction((long)event->x, (long)event->y);
     }
     return TRUE;
 }
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/foxyboxy/interface.cpp touchmegames-0.2.5-ok/src/foxyboxy/interface.cpp
--- touchmegames-0.2.5/src/foxyboxy/interface.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/foxyboxy/interface.cpp	2009-04-14 13:06:52.000000000 -0400
@@ -24,7 +24,7 @@
 
 void FoxyBoxy::removeLine(int line) {
     for (int i = 0; i < 10; ++i) {
-        int type((int)g_object_get_data((GObject *)blocks[i][line - 1], KEY_STR));
+        long type((long)g_object_get_data((GObject *)blocks[i][line - 1], KEY_STR));
         std::stringstream sstr;
         if (type != 0) {
             
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/foxyboxy/support.cpp touchmegames-0.2.5-ok/src/foxyboxy/support.cpp
--- touchmegames-0.2.5/src/foxyboxy/support.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/foxyboxy/support.cpp	2009-04-14 13:08:19.000000000 -0400
@@ -90,7 +90,7 @@
             
             return HitSide;
         }
-        if ((int)g_object_get_data((GObject *)blocks[c[i].x][c[i].y], KEY_STR)) {
+        if ((long)g_object_get_data((GObject *)blocks[c[i].x][c[i].y], KEY_STR)) {
             
             return HitBlock;
         }
@@ -99,13 +99,13 @@
 }
 
 bool FoxyBoxy::canFitBlock() {
-    if ((int)g_object_get_data((GObject *)blocks[4][1], KEY_STR)) {
+    if ((long)g_object_get_data((GObject *)blocks[4][1], KEY_STR)) {
         return false;
     }
-    if ((int)g_object_get_data((GObject *)blocks[5][1], KEY_STR)) {
+    if ((long)g_object_get_data((GObject *)blocks[5][1], KEY_STR)) {
         return false;
     }
-    if ((int)g_object_get_data((GObject *)blocks[6][1], KEY_STR)) {
+    if ((long)g_object_get_data((GObject *)blocks[6][1], KEY_STR)) {
         return false;
     }
     return true;
@@ -468,7 +468,7 @@
     for (int y = 0; y < 22; ++y) {
         int cntr(0);
         for (int x = 0; x < 10 && lineCntr < 4; ++x) {
-            if ((int)g_object_get_data((GObject *)blocks[x][y], KEY_STR)) {
+            if ((long)g_object_get_data((GObject *)blocks[x][y], KEY_STR)) {
                 if (++cntr == 10) {
                     
                     linesToFlash[lineCntr++] = y;
@@ -503,7 +503,7 @@
         while (linesToFlash[line] != -1 && line < 4) {
             
             for (int i = 0; i < 10; ++i) {
-                    int type((int)g_object_get_data((GObject *)blocks[i][linesToFlash[line]], KEY_STR));
+                    long type((long)g_object_get_data((GObject *)blocks[i][linesToFlash[line]], KEY_STR));
                     std::stringstream sstr;
                     sstr << "type" << type << ".png";
                     reloadImage(blocks[i][linesToFlash[line]], sstr.str().c_str());
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/gorillathrilla/events.cpp touchmegames-0.2.5-ok/src/gorillathrilla/events.cpp
--- touchmegames-0.2.5/src/gorillathrilla/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/gorillathrilla/events.cpp	2009-04-14 12:57:01.000000000 -0400
@@ -61,7 +61,7 @@
 
 gboolean GORILLA_THRILLA::timeout(gpointer ptr) {
     GORILLA_THRILLA *gt(reinterpret_cast<GORILLA_THRILLA *>(ptr));
-    int score;
+    long score;
     std::stringstream sstr;
     score = atoi(gtk_label_get_text((GtkLabel *)gt->timeLabel));
     
@@ -84,7 +84,7 @@
 gint GORILLA_THRILLA::gameOverTimeout(gpointer ptr) {
     GORILLA_THRILLA *gt(reinterpret_cast<GORILLA_THRILLA *>(ptr));
     std::stringstream sstr;
-    int score;
+    long score;
     
     score = atoi(gtk_label_get_text((GtkLabel *)gt->timeLabel));
     
@@ -193,7 +193,7 @@
     if (gt->cardsLeft) {
 
         if (gt->dealCard != NULL) {
-            int i;
+            long i;
             for (i = 0; i < 28; ++i) {
                 if (gt->dispCards[i] == NULL) {
                     break;
@@ -259,7 +259,7 @@
 }
 
 int GORILLA_THRILLA::cardIn(int row, int card) {
-    int location(getArrayPosition(row, card));
+    long location(getArrayPosition(row, card));
     if (row > 4 || card > 5 || card < 0) {
         return 0;
     }
@@ -276,7 +276,7 @@
 }
 
 int GORILLA_THRILLA::checkValidSelect(GtkWidget *widget) {
-    int row, card;
+    long row, card;
     GtkWidget **location;
     
     location = std::find(dispCards, &dispCards[27], ((GtkBin *)widget)->child);
@@ -311,7 +311,7 @@
 gboolean GORILLA_THRILLA::middleCardPressed(GtkWidget *widget, GdkEventKey *event, gpointer ptr) {
     GORILLA_THRILLA *gt(reinterpret_cast<GORILLA_THRILLA *>(ptr));
     GtkWidget **location;
-    int row, card;
+    long row, card;
     
     gt->waitingForFirstClick = false;
 
@@ -331,7 +331,7 @@
     }
     
     if (gt->selectedCard == NULL) {
-        int xpos, ypos;
+        long xpos, ypos;
         // find the location to place the arrow...
         ypos = row * 50 + 95;
         xpos = (row % 2 ? 60: 24) + card * 96 + 28;
@@ -351,9 +351,9 @@
 }
 
 void GORILLA_THRILLA::checkCards(GtkWidget *lh, GtkWidget *rh) {
-    int absval(0);
-    int lhcard((*cardMap)[((GtkBin *)lh)->child] - 1); 
-    int rhcard((*cardMap)[((GtkBin *)rh)->child] - 1);
+    long absval(0);
+    long lhcard((*cardMap)[((GtkBin *)lh)->child] - 1); 
+    long rhcard((*cardMap)[((GtkBin *)rh)->child] - 1);
     absval = abs(lhcard - rhcard);
     if (absval <= 1 || absval == 12) {
         std::stringstream sstr;
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/memory/events.cpp touchmegames-0.2.5-ok/src/memory/events.cpp
--- touchmegames-0.2.5/src/memory/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/memory/events.cpp	2009-04-14 12:46:15.655280874 -0400
@@ -58,7 +58,7 @@
 gboolean Memory::timeout(gpointer ptr) {
     Memory *m(reinterpret_cast<Memory *>(ptr));
     std::stringstream sstr;
-    int second, minute;
+    long second, minute;
     switch (m->gameState) {
         case WAITING:
             // don't do anything, just wait for a press
@@ -71,12 +71,12 @@
                     m->stageCountDown = 20;
                     m->playWave("buzzer.wav");
                 }
-                m->progress.percent((int)m->timeLeft / 6);
+                m->progress.percent((long)m->timeLeft / 6);
                 
-                second = ((int)(m->timeLeft / 5)) % 60;
-                minute = (int)(m->timeLeft / 5) / 60;
+                second = ((long)(m->timeLeft / 5)) % 60;
+                minute = (long)(m->timeLeft / 5) / 60;
                 
-                sstr << (int)minute << ':' << std::setw(2) << std::setfill('0') << (int)second;
+                sstr << (long)minute << ':' << std::setw(2) << std::setfill('0') << (long)second;
                 
                 m->progress.text(sstr.str().c_str());
             }
@@ -97,12 +97,12 @@
                     m->stageCountDown = 20;
                     m->playWave("buzzer.wav");
                 }
-                m->progress.percent((int)m->timeLeft / 6);
+                m->progress.percent((long)m->timeLeft / 6);
                 
-                second = ((int)(m->timeLeft / 5)) % 60;
-                minute = (int)(m->timeLeft / 5) / 60;
+                second = ((long)(m->timeLeft / 5)) % 60;
+                minute = (long)(m->timeLeft / 5) / 60;
                 
-                sstr << (int)minute << ':' << std::setw(2) << std::setfill('0') << (int)second;
+                sstr << (long)minute << ':' << std::setw(2) << std::setfill('0') << (long)second;
                 
                 m->progress.text(sstr.str().c_str());
             }
@@ -115,12 +115,12 @@
                 m->timeLeft -= 5;
                 m->timeBonus += 100;
                 
-                m->progress.percent((int)m->timeLeft / 6);
+                m->progress.percent((long)m->timeLeft / 6);
             
-                second = ((int)(m->timeLeft / 5)) % 60;
-                minute = (int)(m->timeLeft / 5) / 60;
+                second = ((long)(m->timeLeft / 5)) % 60;
+                minute = (long)(m->timeLeft / 5) / 60;
             
-                sstr << (int)minute << ':' << std::setw(2) << std::setfill('0') << (int)second;
+                sstr << (long)minute << ':' << std::setw(2) << std::setfill('0') << (long)second;
             
                 m->progress.text(sstr.str().c_str());
                 
@@ -170,8 +170,8 @@
     m->started = true;
     
     if (m->gameState == RUNNING) {
-        sstr << (int)g_object_get_data((GObject *)widget, KEY_STR) + 1 << ".png";
-        if ((int)g_object_get_data((GObject *)widget, KEY_STR) == -1) {
+        sstr << (long)g_object_get_data((GObject *)widget, KEY_STR) + 1 << ".png";
+        if ((long)g_object_get_data((GObject *)widget, KEY_STR) == -1) {
             return;
         }
         if (m->cardsPressed[0] == 0) {
@@ -181,11 +181,11 @@
         else if (m->cardsPressed[1] == 0 && m->cardsPressed[0] != widget) {
             
             
-            m->cardsPressed[1] = widget; // (int)g_object_get_data((GObject *)widget, KEY_STR) + 1;
+            m->cardsPressed[1] = widget; // (long)g_object_get_data((GObject *)widget, KEY_STR) + 1;
             m->reloadImage(gtk_bin_get_child((GtkBin *)widget), sstr.str().c_str());
             
-            if ((int)g_object_get_data((GObject *)m->cardsPressed[0], KEY_STR)
-                    == (int)g_object_get_data((GObject *)m->cardsPressed[1], KEY_STR)) {
+            if ((long)g_object_get_data((GObject *)m->cardsPressed[0], KEY_STR)
+                    == (long)g_object_get_data((GObject *)m->cardsPressed[1], KEY_STR)) {
                 
                 // Set the data to -1 so that they can't get chosen again.
                 g_object_set_data((GObject *)m->cardsPressed[0], KEY_STR, (void *)-1);
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/nonogram/events.cpp touchmegames-0.2.5-ok/src/nonogram/events.cpp
--- touchmegames-0.2.5/src/nonogram/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/nonogram/events.cpp	2009-04-14 12:46:36.558629563 -0400
@@ -57,7 +57,7 @@
 
 gboolean NonoGram::timeout(gpointer ptr) {
     NonoGram *nonoGram(reinterpret_cast<NonoGram *>(ptr));
-    int second, minute;
+    long second, minute;
     std::stringstream sstr;
 
     switch (nonoGram->gameState) {
@@ -71,12 +71,12 @@
                 nonoGram->stageCountDown = 30;
                 nonoGram->playWave("buzzer.wav");
             }
-            nonoGram->progress.percent((int)nonoGram->timeLeft / 6);
+            nonoGram->progress.percent((long)nonoGram->timeLeft / 6);
             
-            second = ((int)(nonoGram->timeLeft / 5)) % 60;
-            minute = (int)(nonoGram->timeLeft / 5) / 60;
+            second = ((long)(nonoGram->timeLeft / 5)) % 60;
+            minute = (long)(nonoGram->timeLeft / 5) / 60;
             
-            sstr << (int)minute << ':' << std::setw(2) << std::setfill('0') << (int)second;
+            sstr << (long)minute << ':' << std::setw(2) << std::setfill('0') << (long)second;
             
             nonoGram->progress.text(sstr.str().c_str());
             
@@ -98,8 +98,8 @@
             nonoGram->gameState = TAKE_ROUND_SCORE;
             break;
         case TAKE_ROUND_SCORE: {
-            int tmpScore = (nonoGram->round - 1) * 25000 + 50000;
-            int score;
+            long tmpScore = (nonoGram->round - 1) * 25000 + 50000;
+            long score;
             score = tmpScore + nonoGram->timeLeft * 150;
             
             gtk_label_set_text((GtkLabel *)nonoGram->roundScoreLabel, nonoGram->addCommas(score).c_str());
@@ -108,7 +108,7 @@
             }
             break;
         case TAKE_TOTAL_SCORE: {
-            int tmpScore = (nonoGram->round - 1) * 25000 + 50000;
+            long tmpScore = (nonoGram->round - 1) * 25000 + 50000;
             
             nonoGram->currentScore += tmpScore + nonoGram->timeLeft * 150;
             gtk_label_set_text((GtkLabel *)nonoGram->totalScoreLabel, nonoGram->addCommas(nonoGram->currentScore).c_str());
@@ -159,7 +159,7 @@
     }
     
     image = gtk_bin_get_child((GtkBin *)widget);
-    switch ((int)g_object_get_data((GObject  *)widget, KEY_STR)) {
+    switch ((long)g_object_get_data((GObject  *)widget, KEY_STR)) {
         case BLANK:
             nonoGram->reloadImage(image, "block.png");
             nonoGram->mouseState = FILLED;
@@ -185,8 +185,8 @@
 
 gboolean NonoGram::blockMotion(GtkWidget *widget, GdkEventMotion *event, gpointer ptr) {
     NonoGram *nonoGram(reinterpret_cast<NonoGram *>(ptr));
-    int X = (int)(event->x + widget->allocation.x);
-    int Y = (int)(event->y + widget->allocation.y);
+    long X = (long)(event->x + widget->allocation.x);
+    long Y = (long)(event->y + widget->allocation.y);
     GdkRectangle rect;
     
     rect.x = X;
@@ -194,8 +194,8 @@
     rect.width = 1;
     rect.height = 1;
     
-    for (int x = 0; x < nonoGram->nonoSize; ++x) {
-        for (int y = 0; y < nonoGram->nonoSize; ++y) {
+    for (long x = 0; x < nonoGram->nonoSize; ++x) {
+        for (long y = 0; y < nonoGram->nonoSize; ++y) {
             if (gtk_widget_intersect(nonoGram->cells[x][y], &rect, NULL)) {
                 switch (nonoGram->mouseState) {
                     case BLANK:
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/nonogram/support.cpp touchmegames-0.2.5-ok/src/nonogram/support.cpp
--- touchmegames-0.2.5/src/nonogram/support.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/nonogram/support.cpp	2009-04-14 13:15:24.000000000 -0400
@@ -720,7 +720,7 @@
     
     for (int x = 0; x < nonoSize; ++x) {
         for (int y = 0; y < nonoSize; ++y) {
-            ng[y][x] = (int)g_object_get_data((GObject  *)gtk_widget_get_parent(cells[x][y]), KEY_STR);
+            ng[y][x] = (long)g_object_get_data((GObject  *)gtk_widget_get_parent(cells[x][y]), KEY_STR);
         }
     }
     while (retval) {
@@ -753,12 +753,12 @@
     for (int x = 0; x < nonoSize; ++x) {
         for (int y = 0; y < nonoSize; ++y) {
             if (ng == NULL) {
-                if ((int)g_object_get_data((GObject  *)gtk_widget_get_parent(cells[x][y]), KEY_STR) == FILLED && nonoGram[y][x] != 1) {
+                if ((long)g_object_get_data((GObject  *)gtk_widget_get_parent(cells[x][y]), KEY_STR) == FILLED && nonoGram[y][x] != 1) {
 //                     std::cout << "Error at " << x << ' ' << y << std::endl;
                     retVal = false;
                 }
             
-                if (nonoGram[y][x] == 1 && (int)g_object_get_data((GObject  *)gtk_widget_get_parent(cells[x][y]), KEY_STR) != FILLED) {
+                if (nonoGram[y][x] == 1 && (long)g_object_get_data((GObject  *)gtk_widget_get_parent(cells[x][y]), KEY_STR) != FILLED) {
 //                     std::cout << "Missing at " << x << ' ' << y << std::endl;
                     retVal = false;
                 }
@@ -785,7 +785,7 @@
 void NonoGram::fillBoard() {
     for (int x = 0; x < nonoSize; ++x) {
         for (int y = 0; y < nonoSize; ++y) {
-            if ((int)g_object_get_data((GObject  *)gtk_widget_get_parent(cells[x][y]), KEY_STR) == BLANK) {
+            if ((long)g_object_get_data((GObject  *)gtk_widget_get_parent(cells[x][y]), KEY_STR) == BLANK) {
                 if (nonoGram[y][x] == 1) {
                     reloadImage(cells[x][y], "blockerr.png");
                 }
@@ -793,7 +793,7 @@
                     reloadImage(cells[x][y], "Xerr.png");
                 }
             }
-            else if ((int)g_object_get_data((GObject  *)gtk_widget_get_parent(cells[x][y]), KEY_STR) != nonoGram[y][x]) {
+            else if ((long)g_object_get_data((GObject  *)gtk_widget_get_parent(cells[x][y]), KEY_STR) != nonoGram[y][x]) {
                 if (nonoGram[y][x] == 1) {
                     reloadImage(cells[x][y], "blockerr.png");
                 }
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/secretphrase/events.cpp touchmegames-0.2.5-ok/src/secretphrase/events.cpp
--- touchmegames-0.2.5/src/secretphrase/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/secretphrase/events.cpp	2009-04-14 13:10:51.000000000 -0400
@@ -194,9 +194,9 @@
 void SecretPhrase::lowerLetterPressed(GtkWidget *widget, GdkEventKey *event, gpointer ptr) {
     SecretPhrase *sp(reinterpret_cast<SecretPhrase *>(ptr));
     if (sp->gameState != HANDLING_KEY && sp->gameState != SPINNING) {
-        int x, y, key;
+        long x, y, key;
         std::stringstream sstr;
-        sp->currentKey = (int)g_object_get_data((GObject *)widget, KEY_STR);
+        sp->currentKey = (long)g_object_get_data((GObject *)widget, KEY_STR);
         key = sp->currentKey;
         if (sp->used[key - 'a']) {
             return;
@@ -249,7 +249,7 @@
     // don't let the user do both keydown and mouse clicked
     // and also don't worry about the key repeat
     if (sp->gameState != HANDLING_KEY && sp->gameState != SPINNING) {
-        int key, x, y;
+        long key, x, y;
         std::stringstream sstr;
         if (event->keyval >= GDK_A && event->keyval <= GDK_Z) {
             key = event->keyval + 0x20;
@@ -329,7 +329,7 @@
 
 void SecretPhrase::categorySelected(GtkWidget *widget, GdkEventKey *event, gpointer ptr) {
     SecretPhrase *sp(reinterpret_cast<SecretPhrase *>(ptr));
-    int cat((int)g_object_get_data((GObject *)widget, KEY_STR));
+    long cat((long)g_object_get_data((GObject *)widget, KEY_STR));
     
     switch (cat) {
         case CatMisc:
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/sudoku/events.cpp touchmegames-0.2.5-ok/src/sudoku/events.cpp
--- touchmegames-0.2.5/src/sudoku/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/sudoku/events.cpp	2009-04-14 12:47:21.111276207 -0400
@@ -54,7 +54,7 @@
 
 gboolean Sudoku::timeout(gpointer ptr) {
     Sudoku *sudoku(reinterpret_cast<Sudoku *>(ptr));
-    int second, minute;
+    long second, minute;
     std::stringstream sstr;
     std::string str;
 
@@ -67,12 +67,12 @@
             if (sudoku->timeLeft <= 0) {
                 sudoku->gameState = OUT_OF_TIME1;
             }
-            sudoku->progress.percent((int)sudoku->timeLeft / 6);
+            sudoku->progress.percent((long)sudoku->timeLeft / 6);
             
-            second = ((int)(sudoku->timeLeft / 5)) % 60;
-            minute = (int)(sudoku->timeLeft / 5) / 60;
+            second = ((long)(sudoku->timeLeft / 5)) % 60;
+            minute = (long)(sudoku->timeLeft / 5) / 60;
             
-            sstr << (int)minute << ':' << std::setw(2) << std::setfill('0') << (int)second;
+            sstr << (long)minute << ':' << std::setw(2) << std::setfill('0') << (long)second;
             
             sudoku->progress.text(sstr.str().c_str());
             
@@ -105,7 +105,7 @@
             break;
         case TAKE_ROUND_SCORE:
             if (sudoku->round == 1) {
-                int score;
+                long score;
                 score = 50000 - sudoku->errors * 5000 + sudoku->timeLeft * 150;
                 sstr << score;
                 str = sstr.str();
@@ -113,7 +113,7 @@
                 gtk_label_set_text((GtkLabel *)sudoku->roundScoreLabel, str.c_str());
             }
             else {
-                int score;
+                long score;
                 score = 75000 - sudoku->errors * 5000 + sudoku->timeLeft * 150;
                 sstr << score;
                 str = sstr.str();
@@ -179,7 +179,7 @@
         sudoku->gameState = RUNNING;
     }
     image = gtk_bin_get_child((GtkBin *)widget);
-    if ((int)g_object_get_data((GObject *)widget, KEY_STR) < 7) {
+    if ((long)g_object_get_data((GObject *)widget, KEY_STR) < 7) {
         
         if (sudoku->currentInt != 0) {
             std::stringstream sstr;
@@ -203,18 +203,18 @@
                 sudoku->gameState = TAKE_PUZZLE_SCORE;
             }
         }
-        else if ((int)g_object_get_data((GObject *)widget, KEY_STR) < 7) {
+        else if ((long)g_object_get_data((GObject *)widget, KEY_STR) < 7) {
             sudoku->reloadImage(image, "null.gif");
             g_object_set_data((GObject *)widget, KEY_STR, 0);
         }
     }
-    else if ((int)g_object_get_data((GObject *)widget, KEY_STR) > 6) {
+    else if ((long)g_object_get_data((GObject *)widget, KEY_STR) > 6) {
         // it's a prefilled number, set the currentInt to this
-        sudoku->currentInt = 255 - (int)g_object_get_data((GObject *)widget, KEY_STR);
+        sudoku->currentInt = 255 - (long)g_object_get_data((GObject *)widget, KEY_STR);
     }
     else if (sudoku->currentInt == 0) {
         
-        if ((int)g_object_get_data((GObject *)widget, KEY_STR) < 7) {
+        if ((long)g_object_get_data((GObject *)widget, KEY_STR) < 7) {
             sudoku->reloadImage(image, "null.gif");
             g_object_set_data((GObject *)widget, KEY_STR, 0);
         }
@@ -224,7 +224,7 @@
 void Sudoku::numberClicked(GtkWidget *widget, GdkEventKey *event, gpointer ptr) {
     Sudoku *sudoku(reinterpret_cast<Sudoku *>(ptr));
     
-    sudoku->currentInt = (int)g_object_get_data((GObject *)widget, KEY_STR);
+    sudoku->currentInt = (long)g_object_get_data((GObject *)widget, KEY_STR);
 }
 
 void Sudoku::solveClicked(GtkWidget *widget, gpointer ptr) {
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/threescompany/events.cpp touchmegames-0.2.5-ok/src/threescompany/events.cpp
--- touchmegames-0.2.5/src/threescompany/events.cpp	2009-03-14 01:09:19.000000000 -0400
+++ touchmegames-0.2.5-ok/src/threescompany/events.cpp	2009-04-14 13:02:59.000000000 -0400
@@ -53,8 +53,8 @@
 int ThreesCompany::checkTrip(int hold) {
     int trip[3];
     
-    for (int i = 0; i < 3; ++i) {
-        trip[i] = (int)g_object_get_data((GObject *)cardHoldImages[hold][i], KEY_STR);
+    for (long i = 0; i < 3; ++i) {
+        trip[i] = (long)g_object_get_data((GObject *)cardHoldImages[hold][i], KEY_STR);
 
         // adjust the number for the actual value
         trip[i] = 13 - ((trip[i] - 1) / 4);
@@ -108,7 +108,7 @@
 
 void ThreesCompany::cardSelected(GtkWidget *widget, GdkEventKey *event, gpointer ptr) {
     ThreesCompany *vp(reinterpret_cast<ThreesCompany *>(ptr));
-    int i = 0;
+    long i = 0;
 }
 
 void ThreesCompany::dealPressed(GtkWidget *widget, gpointer *ptr) {
@@ -157,7 +157,7 @@
 
 void ThreesCompany::holdReleased(GtkWidget *widget, GdkEventButton *event, gpointer ptr) {
     ThreesCompany *tc(reinterpret_cast<ThreesCompany *>(ptr));
-    int card0(-1), card1(-1), holdCard(0), previousCard(-1), previousHold(-1), hold;
+    long card0(-1), card1(-1), holdCard(0), previousCard(-1), previousHold(-1), hold;
     GtkWidget *widget1;
     
     if (!tc->shown) {
@@ -167,7 +167,7 @@
     gtk_widget_destroy(tc->cardMask);
     tc->cardMask = NULL;
     tc->shown = false;
-    for (int i = 0; i < 4; ++i) {
+    for (long i = 0; i < 4; ++i) {
         
         if (widget == tc->cardHolds[i]) {
             hold = i;
@@ -188,7 +188,7 @@
     }
     if (tc->cardMasksCard == tc->cards[2]) {
         tc->cardHoldImages[hold][holdCard] 
-                        = tc->createCard((int)g_object_get_data((GObject *)tc->cards[2], KEY_STR));
+                        = tc->createCard((long)g_object_get_data((GObject *)tc->cards[2], KEY_STR));
             
         gtk_fixed_put((GtkFixed *)tc->fixed, tc->cardHoldImages[hold][holdCard], 160 + (131 * hold), 
                         200 + (30 * holdCard));
@@ -196,10 +196,10 @@
         gtk_widget_show_all(tc->cardHoldImages[hold][holdCard]);
         
         if (tc->cards[0] != NULL) {
-            card0 = (int)g_object_get_data((GObject *)tc->cards[0], KEY_STR);
+            card0 = (long)g_object_get_data((GObject *)tc->cards[0], KEY_STR);
         }
         if (tc->cards[1] != NULL) {
-            card1 = (int)g_object_get_data((GObject *)tc->cards[1], KEY_STR);
+            card1 = (long)g_object_get_data((GObject *)tc->cards[1], KEY_STR);
         }
         
         if (tc->cards[0] != NULL) {
@@ -235,7 +235,7 @@
         }
         
         if (tc->cardHoldImages[hold][2] != NULL) {
-            int ret = tc->checkTrip(hold);
+            long ret = tc->checkTrip(hold);
             if (ret) {
                 tc->clearHold(hold, ret);
             }
@@ -253,7 +253,7 @@
         previousCard = 2;
     }
     if (previousCard != -1) {
-        card0 = (int)g_object_get_data((GObject *)tc->topCardHoldImages[previousCard], KEY_STR);
+        card0 = (long)g_object_get_data((GObject *)tc->topCardHoldImages[previousCard], KEY_STR);
         gtk_widget_destroy(tc->topCardHoldImages[previousCard]);
         tc->topCardHoldImages[previousCard] = NULL;
         tc->cardHoldImages[hold][holdCard] = tc->createCard(card0);
@@ -262,15 +262,15 @@
         gtk_widget_show_all(tc->cardHoldImages[hold][holdCard]);
         
         if (tc->cardHoldImages[hold][2] != NULL) {
-            int ret = tc->checkTrip(hold);
+            long ret = tc->checkTrip(hold);
             if (ret) {
                 tc->clearHold(hold, ret);
             }
         }
         return;
     }
-    for (int i = 0; i < 4; ++i) {
-        for (int j = 0; j < 3; ++j) {
+    for (long i = 0; i < 4; ++i) {
+        for (long j = 0; j < 3; ++j) {
             if (tc->cardMasksCard == tc->cardHoldImages[i][j] && i != hold) {
                 previousCard = j;
                 previousHold = i;
@@ -278,7 +278,7 @@
         }
     }
     if (previousCard != -1) {
-        card0 = (int)g_object_get_data((GObject *)tc->cardHoldImages[previousHold][previousCard], KEY_STR);
+        card0 = (long)g_object_get_data((GObject *)tc->cardHoldImages[previousHold][previousCard], KEY_STR);
         gtk_widget_destroy(tc->cardHoldImages[previousHold][previousCard]);
         tc->cardHoldImages[previousHold][previousCard] = NULL;
         tc->cardHoldImages[hold][holdCard] = tc->createCard(card0);
@@ -287,7 +287,7 @@
         gtk_widget_show_all(tc->cardHoldImages[hold][holdCard]);
         
         if (tc->cardHoldImages[hold][2] != NULL) {
-            int ret = tc->checkTrip(hold);
+            long ret = tc->checkTrip(hold);
             if (ret) {
                 tc->clearHold(hold, ret);
             }
@@ -300,7 +300,7 @@
 
 void ThreesCompany::topHoldReleased(GtkWidget *widget, GdkEventButton *event, gpointer ptr) {
     ThreesCompany *tc(reinterpret_cast<ThreesCompany *>(ptr));
-    int card0(-1), card1(-1), holdCard(0), previousCard(-1), previousHold(-1), hold;
+    long card0(-1), card1(-1), holdCard(0), previousCard(-1), previousHold(-1), hold;
     GtkWidget *widget1;
     
     if (!tc->shown) {
@@ -311,7 +311,7 @@
     tc->cardMask = NULL;
     tc->shown = false;
     
-    for (int i = 0; i < 3; ++i) {
+    for (long i = 0; i < 3; ++i) {
         if (widget == tc->topCardHolds[i]) {
             hold = i;
             i = 4;
@@ -323,17 +323,17 @@
     }
     
     if (tc->cardMasksCard == tc->cards[2]) {
-        tc->topCardHoldImages[hold] = tc->createCard((int)g_object_get_data((GObject *)tc->cards[2], KEY_STR));
+        tc->topCardHoldImages[hold] = tc->createCard((long)g_object_get_data((GObject *)tc->cards[2], KEY_STR));
         
         gtk_fixed_put((GtkFixed *)tc->fixed, tc->topCardHoldImages[hold], 185 + (173 * hold), 40);
         
         gtk_widget_show_all(tc->topCardHoldImages[hold]);
         
         if (tc->cards[0] != NULL) {
-            card0 = (int)g_object_get_data((GObject *)tc->cards[0], KEY_STR);
+            card0 = (long)g_object_get_data((GObject *)tc->cards[0], KEY_STR);
         }
         if (tc->cards[1] != NULL) {
-            card1 = (int)g_object_get_data((GObject *)tc->cards[1], KEY_STR);
+            card1 = (long)g_object_get_data((GObject *)tc->cards[1], KEY_STR);
         }
         
         if (tc->cards[0] != NULL) {
@@ -382,7 +382,7 @@
         previousCard = 2;
     }
     if (previousCard != -1) {
-        card0 = (int)g_object_get_data((GObject *)tc->topCardHoldImages[previousCard], KEY_STR);
+        card0 = (long)g_object_get_data((GObject *)tc->topCardHoldImages[previousCard], KEY_STR);
         gtk_widget_destroy(tc->topCardHoldImages[previousCard]);
         tc->topCardHoldImages[previousCard] = NULL;
         tc->topCardHoldImages[hold] = tc->createCard(card0);
@@ -391,8 +391,8 @@
         gtk_widget_show_all(tc->topCardHoldImages[hold]);
         return;
     }
-    for (int i = 0; i < 4; ++i) {
-        for (int j = 0; j < 3; ++j) {
+    for (long i = 0; i < 4; ++i) {
+        for (long j = 0; j < 3; ++j) {
             if (tc->cardMasksCard == tc->cardHoldImages[i][j]) {
                 previousCard = j;
                 previousHold = i;
@@ -400,7 +400,7 @@
         }
     }
     if (previousCard != -1) {
-        card0 = (int)g_object_get_data((GObject *)tc->cardHoldImages[previousHold][previousCard], KEY_STR);
+        card0 = (long)g_object_get_data((GObject *)tc->cardHoldImages[previousHold][previousCard], KEY_STR);
         gtk_widget_destroy(tc->cardHoldImages[previousHold][previousCard]);
         tc->cardHoldImages[previousHold][previousCard] = NULL;
         tc->topCardHoldImages[hold] = tc->createCard(card0);
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/tritowers/events.cpp touchmegames-0.2.5-ok/src/tritowers/events.cpp
--- touchmegames-0.2.5/src/tritowers/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/tritowers/events.cpp	2009-04-14 13:04:28.000000000 -0400
@@ -168,7 +168,7 @@
 }
 
 int TriTowers::cardIn(int row, int card) {
-    int location(getArrayPosition(row, card));
+    long location(getArrayPosition(row, card));
     
     if (dispCards[location] != NULL) {
         return 1;
@@ -178,7 +178,7 @@
 }
 
 int TriTowers::checkValidSelect(GtkWidget *widget) {
-    int row, card;
+    long row, card;
     GtkWidget **location;
     location = std::find(dispCards, &dispCards[30], ((GtkBin *)widget)->child);
     if (location == NULL) {
@@ -214,7 +214,7 @@
 void TriTowers::cardSelected(GtkWidget *widget, GdkEventKey *event, gpointer ptr) {
     TriTowers *tt(reinterpret_cast<TriTowers *>(ptr));
     GtkWidget **location;
-    int row, card;
+    long row, card;
     tt->waitingForFirstClick = 0;
     gtk_widget_hide(tt->cardScore);
     
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/tritowers/support.cpp touchmegames-0.2.5-ok/src/tritowers/support.cpp
--- touchmegames-0.2.5/src/tritowers/support.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/tritowers/support.cpp	2009-04-14 13:05:39.000000000 -0400
@@ -308,9 +308,9 @@
 }
 
 void TriTowers::checkCards(GtkWidget *lh, GtkWidget *rh) {
-    int absval(0);
-    int lhcard((int)g_object_get_data((GObject *)lh, KEY_STR)); 
-    int rhcard((int)g_object_get_data((GObject *)rh, KEY_STR));
+    long absval(0);
+    long lhcard((long)g_object_get_data((GObject *)lh, KEY_STR)); 
+    long rhcard((long)g_object_get_data((GObject *)rh, KEY_STR));
     absval = abs(lhcard / 4 - 
                 rhcard / 4);
     
@@ -403,7 +403,7 @@
         }
         sstr.str("");
         sstr << deckLocation 
-                << (int)g_object_get_data((GObject *)rh, KEY_STR) + 1 << ".png";
+                << (long)g_object_get_data((GObject *)rh, KEY_STR) + 1 << ".png";
 //         dealCard = gtk_image_new_from_file(sstr.str().c_str());
         dealCard = loadMainImage(sstr.str().c_str());
         g_object_set_data((GObject *)dealCardBox, KEY_STR, g_object_get_data((GObject *)rh, KEY_STR));
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/videopoker/events.cpp touchmegames-0.2.5-ok/src/videopoker/events.cpp
--- touchmegames-0.2.5/src/videopoker/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/videopoker/events.cpp	2009-04-14 12:49:17.567253916 -0400
@@ -207,14 +207,14 @@
                         vp->currentFlipCard = 0;
                         vp->cardLocation = 0;
                         vp->startHand();
-                        for (int i = 0; i < 5; ++i) {
+                        for (long i = 0; i < 5; ++i) {
                             //vp->betButtons[i].changeState(TmgToggleButton::UP);
                         }
                         gtk_label_set_text((GtkLabel *)vp->instructionLabel,
                                         "Select a bet and press the deal button.");
                         vp->gameState = SELECT_BET;
                         
-                        for (int i = 0; i < 5; ++i) {
+                        for (long i = 0; i < 5; ++i) {
                                 gtk_image_set_from_file((GtkImage *)vp->cardImages[i], vp->deckBack.c_str());
                                 vp->cardFront[i] = false;
                                 
@@ -239,7 +239,7 @@
     }
     
     if (vp->gameState == SELECT_BET) {
-        for (int i = 0; i < 5; ++i) {
+        for (long i = 0; i < 5; ++i) {
             if (second == &vp->betButtons[i] && vp->currentBet / 5 - 1 != i) {
                 vp->betButtons[vp->currentBet / 5 - 1].changeState(TmgToggleButton::UP);
                 vp->currentBet = (i + 1) * 5;
@@ -259,7 +259,7 @@
 
 void VideoPoker::cardSelected(GtkWidget *widget, GdkEventKey *event, gpointer ptr) {
     VideoPoker *vp(reinterpret_cast<VideoPoker *>(ptr));
-    int i = 0;
+    long i = 0;
     if (vp->gameState != SELECT_CARDS) {
         return;
     }
@@ -301,7 +301,7 @@
             
             
 
-            for (int i = 0; i < 5; ++i) {
+            for (long i = 0; i < 5; ++i) {
                 if (vp->currentBet / 5 - 1 != i) {
                     vp->betButtons[i].changeState(TmgToggleButton::UP);
                 }
diff -U 3 -H -d -r -N -- touchmegames-0.2.5/src/wordhunt/events.cpp touchmegames-0.2.5-ok/src/wordhunt/events.cpp
--- touchmegames-0.2.5/src/wordhunt/events.cpp	2009-03-14 01:09:20.000000000 -0400
+++ touchmegames-0.2.5-ok/src/wordhunt/events.cpp	2009-04-14 13:01:10.000000000 -0400
@@ -57,25 +57,25 @@
     std::string attempt;
     std::string revWord;
     bool done(false);
-    int len(word.size());
+    long len(word.size());
     
-    for (int i = word.size() - 1; i >= 0; --i) {
+    for (long i = word.size() - 1; i >= 0; --i) {
         revWord += word[i];
     }
     
-    for (int x = 0; x < 12 && !done; ++x) {
-        for (int y = 0; y < 12 && !done; ++y) {
+    for (long x = 0; x < 12 && !done; ++x) {
+        for (long y = 0; y < 12 && !done; ++y) {
             
             attempt.clear();
             // horizontal check
-            for (int i = 0; i + x < 12 && i < len; ++i) {
+            for (long i = 0; i + x < 12 && i < len; ++i) {
                 //attempt += gtk_label_get_text((GtkLabel *)letters[x + i][y]);
-                attempt += toupper((int)g_object_get_data((GObject *)letters[x + i][y], KEY_STR));
+                attempt += toupper((long)g_object_get_data((GObject *)letters[x + i][y], KEY_STR));
             }
     
             if (word == attempt || attempt == revWord) {
     
-                    for (int i = 0; i + x < 12 & i < len; ++i) {
+                    for (long i = 0; i + x < 12 & i < len; ++i) {
                         std::string str;
                         
                         str = "letterhi_";
@@ -89,14 +89,14 @@
             
             attempt.clear();
             // vertical check
-            for (int i = 0; i + y < 12 && i < len; ++i) {
+            for (long i = 0; i + y < 12 && i < len; ++i) {
                 //attempt += gtk_label_get_text((GtkLabel *)letters[x][y + i]);
-                attempt += toupper((int)g_object_get_data((GObject *)letters[x][y + i], KEY_STR));
+                attempt += toupper((long)g_object_get_data((GObject *)letters[x][y + i], KEY_STR));
             }
             
             
             if (word == attempt || attempt == revWord) {
-                for (int i = 0; i + y < 12 & i < len; ++i) {
+                for (long i = 0; i + y < 12 & i < len; ++i) {
                     //gtk_widget_modify_style(letters[x][y + i]->parent, bgCircle);
                     std::string str;
                     str = "letterhi_";
@@ -113,7 +113,7 @@
 }
 
 void WordHunt::findWords() {
-    for (int i = 0; i < 10; ++i) {
+    for (long i = 0; i < 10; ++i) {
         if (!wordFound[i]) {
             findWord(words[i]);
         }
@@ -148,7 +148,7 @@
                 std::string str;
                     
                     //score = atoi(gtk_label_get_text((GtkLabel *)wh->totalScore));
-                    wh->totalScoreInt += (int)(wh->timeLeft * 600.0);
+                    wh->totalScoreInt += (long)(wh->timeLeft * 600.0);
                     sstr << wh->totalScoreInt;
                     str = sstr.str();
                     wh->addCommas(str);
@@ -158,9 +158,9 @@
             second = (wh->timeLeft * 100.0) / 5.0 * 3.0;
             minute = second / 60.0;
             
-            sstr << (int)minute << ':' << std::setw(2) << std::setfill('0') << (int)second;
+            sstr << (long)minute << ':' << std::setw(2) << std::setfill('0') << (long)second;
             
-            wh->progress.percent((int)(wh->timeLeft * 100));
+            wh->progress.percent((long)(wh->timeLeft * 100));
             wh->progress.text(sstr.str().c_str());
             
             //gtk_progress_bar_set_fraction((GtkProgressBar *)wh->timeBar, wh->timeLeft);
@@ -217,8 +217,8 @@
     second = (wh->timeLeft * 100.0) / 5.0 * 3.0;
     minute = second / 60.0;
     
-    sstr << (int)minute << ':' << std::setw(2) << std::setfill('0') << (int)second;
-    wh->progress.percent((int)(wh->timeLeft * 100));
+    sstr << (long)minute << ':' << std::setw(2) << std::setfill('0') << (long)second;
+    wh->progress.percent((long)(wh->timeLeft * 100));
     wh->progress.text(sstr.str().c_str());
     
     //gtk_progress_bar_set_fraction((GtkProgressBar *)wh->timeBar, wh->timeLeft);
@@ -228,20 +228,20 @@
 }
 
 int WordHunt::checkMatch() {
-    int match;
+    long match;
     std::string str, revstr;
 
     switch (direction) {
         case HORIZONTAL:
-            for (int i = beginx; i <= endx; ++i) {
+            for (long i = beginx; i <= endx; ++i) {
                 //str += gtk_label_get_text((GtkLabel *)letters[i][beginy]);
-                str += toupper((int)g_object_get_data((GObject *)letters[i][beginy], KEY_STR));
+                str += toupper((long)g_object_get_data((GObject *)letters[i][beginy], KEY_STR));
             }
             break;
         case VERTICAL:
-            for (int i = beginy; i <= endy; ++i) {
+            for (long i = beginy; i <= endy; ++i) {
                 //str += gtk_label_get_text((GtkLabel *)letters[beginx][i]);
-                str += toupper((int)g_object_get_data((GObject *)letters[beginx][i], KEY_STR));
+                str += toupper((long)g_object_get_data((GObject *)letters[beginx][i], KEY_STR));
             }
             break;
         case NONE:
@@ -251,24 +251,24 @@
     for (match = 0; match < 10 && words[match] != str; ++match);
     
     if (match < 10 && !wordFound[match]) {
-        //int score;
+        //long score;
         std::stringstream sstr;
         std::string tmpstr;
         bool roundOver(true);
         playWave("gotword.wav");
         
         //score = atoi(gtk_label_get_text((GtkLabel *)totalScore));
-        totalScoreInt += (int)(timeLeft * 3000.0);
+        totalScoreInt += (long)(timeLeft * 3000.0);
         sstr << totalScoreInt;
         str = sstr.str();
         addCommas(str);
         gtk_label_set_text((GtkLabel *)totalScore, str.c_str());
         switch (direction) {
             case HORIZONTAL:
-                for (int i = beginx; i <= endx; ++i) {
+                for (long i = beginx; i <= endx; ++i) {
                     // fix me
                     std::string str;
-                    char ch((int)g_object_get_data((GObject *)letters[i][beginy], KEY_STR));
+                    char ch((long)g_object_get_data((GObject *)letters[i][beginy], KEY_STR));
                     str = "letterlo_";
                     str += ch;
                     str += ".png";
@@ -277,11 +277,11 @@
                 }
                 break;
                 case VERTICAL:
-                        for (int i = beginy; i <= endy; ++i) {
+                        for (long i = beginy; i <= endy; ++i) {
                             // fix me
                             // gtk_widget_modify_style(letters[beginx][i]->parent, bgDone);
                             std::string str;
-                            char ch((int)g_object_get_data((GObject *)letters[beginx][i], KEY_STR));
+                            char ch((long)g_object_get_data((GObject *)letters[beginx][i], KEY_STR));
                             str = "letterlo_";
                             str += ch;
                             str += ".png";
@@ -305,7 +305,7 @@
         direction = NONE;
         movement = MOVEMENT_NONE;
         clearing = false;
-        for (int i = 0; i < 10; ++i) {
+        for (long i = 0; i < 10; ++i) {
             if (!wordFound[i]) {
                 roundOver = false;
             }
@@ -320,7 +320,7 @@
     }
     else {
             revstr = "";
-            for (int i = str.size() - 1; i >= 0; --i) {
+            for (long i = str.size() - 1; i >= 0; --i) {
                     revstr += str[i];
             }
             for (match = 0; match < 10 && words[match] != revstr; ++match);
@@ -333,15 +333,15 @@
                     playWave("gotword.wav");
                     
                     //score = atoi(gtk_label_get_text((GtkLabel *)totalScore));
-                    totalScoreInt += (int)(timeLeft * 3000.0);
+                    totalScoreInt += (long)(timeLeft * 3000.0);
                     sstr << totalScoreInt;
                     str = sstr.str();
                     addCommas(str);
                     gtk_label_set_text((GtkLabel *)totalScore, str.c_str());
                     switch (direction) {
                         case HORIZONTAL:
-                            for (int i = beginx; i <= endx; ++i) {
-                                char ch((int)g_object_get_data((GObject *)letters[i][beginy], KEY_STR));
+                            for (long i = beginx; i <= endx; ++i) {
+                                char ch((long)g_object_get_data((GObject *)letters[i][beginy], KEY_STR));
                                 str = "letterlo_";
                                 str += ch;
                                 str += ".png";
@@ -350,8 +350,8 @@
                             }
                             break;
                         case VERTICAL:
-                            for (int i = beginy; i <= endy; ++i) {
-                                char ch((int)g_object_get_data((GObject *)letters[beginx][i], KEY_STR));
+                            for (long i = beginy; i <= endy; ++i) {
+                                char ch((long)g_object_get_data((GObject *)letters[beginx][i], KEY_STR));
                                 str = "letterlo_";
                                 str += ch;
                                 str += ".png";
@@ -375,7 +375,7 @@
                 direction = NONE;
                 movement = MOVEMENT_NONE;
                 clearing = false;
-                for (int i = 0; i < 10; ++i) {
+                for (long i = 0; i < 10; ++i) {
                     if (!wordFound[i]) {
                         roundOver = false;
                     }
@@ -401,10 +401,10 @@
         return;
     }
     letter = gtk_bin_get_child((GtkBin *)widget);
-    ch = (int)g_object_get_data((GObject *)letter, KEY_STR);
+    ch = (long)g_object_get_data((GObject *)letter, KEY_STR);
 
-    for (int x = 0; x < numberOfRows; ++x) {
-        for (int y = 0; y < numberOfRows; ++y) {
+    for (long x = 0; x < numberOfRows; ++x) {
+        for (long y = 0; y < numberOfRows; ++y) {
             if (wh->letters[x][y]->parent == widget) {
                 if (!wh->hunting) {
                     wh->hunting = true;
@@ -465,8 +465,8 @@
     WordHunt *wh(reinterpret_cast<WordHunt *>(ptr));
     std::string str;
     char ch;
-    int X = (int)(event->x + widget->allocation.x);
-    int Y = (int)(event->y + widget->allocation.y);
+    long X = (long)(event->x + widget->allocation.x);
+    long Y = (long)(event->y + widget->allocation.y);
     GdkRectangle rect;
 	
     if (wh->gameState != GAME_PLAY) {
@@ -480,8 +480,8 @@
     
     X = -1;
     Y = -1;
-    for (int x = 0; x < numberOfRows; ++x) {
-        for (int y = 0; y < numberOfRows; ++y) {
+    for (long x = 0; x < numberOfRows; ++x) {
+        for (long y = 0; y < numberOfRows; ++y) {
             if (gtk_widget_intersect(wh->letters[x][y]->parent, &rect, NULL)) {
                 X = x;
                 Y = y;
@@ -541,7 +541,7 @@
             wh->lastx = wh->endx;
             wh->lasty = wh->endy;
             wh->takeCareOfMove = false;
-            ch = (int)g_object_get_data((GObject *)wh->letters[X][Y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)wh->letters[X][Y], KEY_STR);
             str = "letterhi_";
             str += ch;
             str += ".png";
@@ -557,7 +557,7 @@
             wh->lastx = wh->endx;
             wh->lasty = wh->endy;
             wh->takeCareOfMove = false;
-            ch = (int)g_object_get_data((GObject *)wh->letters[X][Y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)wh->letters[X][Y], KEY_STR);
             str = "letterhi_";
             str += ch;
             str += ".png";
@@ -601,14 +601,14 @@
     }
     if (x == beginx && x == endx) {
         if (highlighted[endx][y]) {
-            ch = (int)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
             str = "letterlo_";
             str += ch;
             str += ".png";
             reloadImage(letters[endx][y], str.c_str());
         }
         else {
-            ch = (int)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
             str = "letter_";
             str += ch;
             str += ".png";
@@ -619,14 +619,14 @@
     }
     else if (x == endx) {
         if (highlighted[endx][y]) {
-            ch = (int)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
             str = "letterlo_";
             str += ch;
             str += ".png";
             reloadImage(letters[endx][y], str.c_str());
         }
         else {
-            ch = (int)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
             str = "letter_";
             str += ch;
             str += ".png";
@@ -641,14 +641,14 @@
     }
     else if (x == beginx) {
         if (highlighted[beginx][y]) {
-            ch = (int)g_object_get_data((GObject *)letters[beginx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[beginx][y], KEY_STR);
             str = "letterlo_";
             str += ch;
             str += ".png";
             reloadImage(letters[beginx][y], str.c_str());
         }
         else {
-            ch = (int)g_object_get_data((GObject *)letters[beginx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[beginx][y], KEY_STR);
             str = "letter_";
             str += ch;
             str += ".png";
@@ -686,7 +686,7 @@
             --beginx;
 
             
-            ch = (int)g_object_get_data((GObject *)letters[beginx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[beginx][y], KEY_STR);
             str = "letterhi_";
             str += ch;
             str += ".png";
@@ -699,7 +699,7 @@
         // if one got skipped, make sure to get it
         while (endx < x) {
             ++endx;
-            ch = (int)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
             
             str = "letterhi_";
             str += ch;
@@ -709,14 +709,14 @@
     }
     else if (x == endx - 1 && endx != beginx && movement == MOVEMENT_RIGHT) {
         if (highlighted[endx][y]) {
-            ch = (int)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
             str = "letterlo_";
             str += ch;
             str += ".png";
             reloadImage(letters[endx][y], str.c_str());
         }
         else {
-            ch = (int)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[endx][y], KEY_STR);
             str = "letter_";
             str += ch;
             str += ".png";
@@ -732,14 +732,14 @@
     }
     else if (x == beginx + 1 && beginx != endx && movement == MOVEMENT_LEFT) {
         if (highlighted[beginx][y]) {
-            ch = (int)g_object_get_data((GObject *)letters[beginx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[beginx][y], KEY_STR);
             str = "letterlo_";
             str += ch;
             str += ".png";
             reloadImage(letters[beginx][y], str.c_str());
         }
         else {
-            ch = (int)g_object_get_data((GObject *)letters[beginx][y], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[beginx][y], KEY_STR);
             str = "letter_";
             str += ch;
             str += ".png";
@@ -759,14 +759,14 @@
     }
     if (y == beginy && y == endy) {
         if (highlighted[x][beginy]) {
-            ch = (int)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
             str = "letterlo_";
             str += ch;
             str += ".png";
             reloadImage(letters[x][beginy], str.c_str());
         }
         else {
-            ch = (int)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
             str = "letter_";
             str += ch;
             str += ".png";
@@ -777,14 +777,14 @@
     }
     else if (y == endy) {
         if (highlighted[x][endy]) {
-            ch = (int)g_object_get_data((GObject *)letters[x][endy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][endy], KEY_STR);
             str = "letter_lo";
             str += ch;
             str += ".png";
             reloadImage(letters[x][endy], str.c_str());
         }
         else {
-            ch = (int)g_object_get_data((GObject *)letters[x][endy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][endy], KEY_STR);
             str = "letter_";
             str += ch;
             str += ".png";
@@ -799,14 +799,14 @@
     }
     else if (y == beginy) {
         if (highlighted[x][beginy]) {
-            ch = (int)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
             str = "letter_lo";
             str += ch;
             str += ".png";
             reloadImage(letters[x][beginy], str.c_str());
         }
         else {
-            ch = (int)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
             str = "letter_";
             str += ch;
             str += ".png";
@@ -840,7 +840,7 @@
         
         while (beginy > y) {
             --beginy;
-            ch = (int)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
             str = "letterhi_";
             str += ch;
             str += ".png";
@@ -855,7 +855,7 @@
         while (endy < y) {
             ++endy;
 
-            ch = (int)g_object_get_data((GObject *)letters[x][endy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][endy], KEY_STR);
             str = "letterhi_";
             str += ch;
             str += ".png";
@@ -866,14 +866,14 @@
     else if (y == endy - 1 && endy != beginy && movement == MOVEMENT_DOWN) {
         if (highlighted[x][endy]) {
       
-            ch = (int)g_object_get_data((GObject *)letters[x][endy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][endy], KEY_STR);
             str = "letterlo_";
             str += ch;
             str += ".png";
             reloadImage(letters[x][endy], str.c_str());
         }
         else {
-            ch = (int)g_object_get_data((GObject *)letters[x][endy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][endy], KEY_STR);
             str = "letter_";
             str += ch;
             str += ".png";
@@ -889,14 +889,14 @@
     }
     else if (y == beginy + 1 && beginy != endy && movement == MOVEMENT_UP) {
         if (highlighted[x][beginy]) {
-            ch = (int)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
             str = "letterlo_";
             str += ch;
             str += ".png";
             reloadImage(letters[x][beginy], str.c_str());
         }
         else {
-            ch = (int)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
+            ch = (long)g_object_get_data((GObject *)letters[x][beginy], KEY_STR);
             str = "letter_";
             str += ch;
             str += ".png";
